#!/usr/bin/env bash

current_step_file(){
   # echo curernt file: like T1_reorient.nii.gz
   # using .cur_step file or input arg
   # WARNING: if no input and no .cur_step assume .nii.gz -- this could be wrong
   # GLOBAL: T1
   #echo "(${FUNCNAME[1]}) $FUNCNAME: step:'$step_str'; T1=$T1" >&2
   if [ $# -gt 0 ]; then
      step_str="$1"
   else
      [ ! -r .cur_step ] && step_str="" || read step_str < .cur_step
   fi
   [ -n "$step_str" ] && suffix="_${step_str}" || suffix=""
   echo ${T1}${suffix}.nii.gz
}
cur_and_next(){
   # give 'new step name'
   # echo out the previous and new current step file names
   # GLOBAL: T1 (implicit)
   # SIDEEFFECT: update step_str file '.cur_step'
   local next_step="$1"
   local pre out step_str

   [ -r .cur_step ] && read step_str < .cur_step || cur_step=""
   read pre < <(current_step_file $step_str)
   [ -z "$step_str" ] && \
      step_str="$next_step" || \
      step_str="${step_str}_${next_step}"

   echo $step_str > .cur_step
   read out < <(current_step_file $step_str)
   echo -e "$pre\t$out"
}
already_run(){
   # check pre exists (exit with error otherwise).
   # return true if output exists
   # false if still needs to be created
   local pre="$1"; shift
   local out="$1"; shift
   [ ! -r "$pre" ] && echo "#ERROR: $FUNCNAME input '$pre' DNE!" >&2 && exit 1
   [ -r $out ] && rel "reusing $(ls -l $out)" c && return 0
   # need to run, return with error=>not already run
   return 1
}
backup_original(){
   local T1="$1"; shift
   local nifti="$1"; shift
   local orig=${T1}_original.nii.gz
   if [ -r "$orig" ]; then
      # if orig is current, we don't need to do anything
      # this might happen with lncdprep
      diff -q "$orig" "$nifti" && return 0
      rel "3dcopy -overwrite $orig $nifti"
   else
      rel "3dcopy -overwrite $nifti $orig"
   fi
}
reorient(){
   # GLOBAL: nifti, T1
   # SIDE-EFFECT: update step_str file .cur_step
   # assume reorient is always first step
   #reorient structural to RPI/LPI to match template
   # this removes any history from mprage. so save to text file
   local pre=$nifti
   [ ! -r "$pre" ] && echo "#ERROR: $FUNCNAME input '$pre' DNE!" && exit 1
   step_str="reorient"
   echo $step_str > .cur_step

   local out="$(current_step_file $step_str)"
   [ -r "$out" ] && rel "reusing $(ls -l $out)" c && return 0

   [ -n "$(3dNotes "$nifti"  2>/dev/null)" ] && rel "3dNotes '$nifti' > ${T1}_history.txt"
   rel "fslreorient2std $pre $out"
}

unifize(){
   # GLOBALS: T1
   # SIDE-EFFECT: update step_str in file .cur_step
   # 20210422 "remove shading artifacts." implemented for baby data
   # > The output dataset has the white matter (WM) intensity approximately
   # > uniformized across space, and scaled to peak at about 1000.
   local pre out
   rel "# removing shading artifact" c
   read pre out < <(cur_and_next "unifize")
   already_run "$pre" "$out" ||
    rel "3dUnifize -prefix $out -overwrite -input $pre"
}

cut_zindex(){
   # GLOBALS: T1
   # SIDE-EFFECT: update step_str in file .cur_step
   # cut zindex. can be single intenger/slice number or range.
   local z1 z2 zidx
   zidx="$1"; shift

   rel "# crop image w/zindex $zidx" c
   local pre out
   read pre out < <(cur_and_next "zindex-$zidx")
   already_run "$pre" "$out" && return 0

   if [[ $zidx =~ ([0-9]+)-([0-9]+)  ]]; then
      z1=${BASH_REMATCH[1]}
      z2=${BASH_REMATCH[2]}
   else
      z1=$zidx
      z2=$(3dinfo -nk $pre)
      let --z2 # zero based indexing
   fi
   rel "3dZcutup -prefix $out -keep $z1 $z2 $pre"
}

deneck(){
   # implict global T1
   # sideffect update step_str in file .cur_step
   # histogram/local min to remove neck and below from image
   rel "# remove neck and down" c
   local pre out
   read pre out < <(cur_and_next "deneck")
   already_run "$pre" "$out" ||
     rel "remove_neck.py $pre $out"
}

deface(){
   # implict global T1
   # sideffect update step_str in file .cur_step
   # pydeface. hopefully get arms and hands near face too
   rel "# remove face" c
   local pre out
   read pre out < <(cur_and_next "deface")
   already_run "$pre" "$out" ||
     rel "pydeface $pre --outfile $out"
}


maybe_dilate_bias_in() {
   # SIDEFFECT: can change fnirt_in (and make files)
   # GLOBALS:
   #   T1=mprage
   #   ext=.nii.gz
   #   fnirt_in=${T1}_biascorr${warpsuffix}
   #   DIL_FNIRT_INPUT_BY=0
   [ ! -v fnirt_in ] &&
      echo "$FUNCNAME: missing global variable fnirt_in" >&2  && return 1
   [ ! -v T1 ] &&
      echo "$FUNCNAME: missing global variable T1" && return 1
   [ ! -v ext ] && local ext=.nii.gz

   if [ -z "$DIL_FNIRT_INPUT_BY" ]; then
      # nothing to do. keep fnirt_in as is
      :
   elif [ "$DIL_FNIRT_INPUT_BY" -ge 0 ]; then

      local bet=${T1}_bet${ext}
      # mprage_bet probably doesn't exist yet, but skullstrip should
      [ ! -r "$bet" ] && bet=${T1}_skullstrip${ext}
      [ ! -r "$bet" ] &&
         echo "ERROR: cannot find '$bet' in $(pwd)" >&2 && return 1
      local fnirt_dil_in=${fnirt_in}_dil${DIL_FNIRT_INPUT_BY}mask.nii.gz
      local dilmask=${T1}_mask_dil$DIL_FNIRT_INPUT_BY.nii.gz
      local betmask=${T1}_bet_mask.nii.gz
      rel "3dcalc -expr 'step(a)' -a $bet -prefix $betmask"
      rel "3dmask_tool -input $betmask -prefix $dilmask -dilate_inputs $DIL_FNIRT_INPUT_BY"
      rel "3dcalc -expr 'm*b' -m $dilmask -b $fnirt_in${ext} -prefix $fnirt_dil_in"
      fnirt_in="$fnirt_dil_in"
   fi
}
