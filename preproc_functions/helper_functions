#!/bin/bash

## where to look for finding the standard space template directory
# expect files like:
#   talairach_fsl_mni152/TalFSL_MNI152_T1_3mm_brain
#   fsl_mni152/MNI152_T1_3mm_brain
#   mni_icbm152_nlin_asym_09c/mni_icbm152_t1_tal_nlin_asym_09c_brain_3mm
#   mni_icbm152_nlin_asym_09c/mni_icbm152_t1_tal_nlin_asym_09c_brain_2.3mm
#   spm8_mni/T1_brain
#   mni_icbm152_nlin_asym_09c/mni_icbm152_t1_tal_nlin_asym_09c_brain_2mm

#prefer env variable, then ACI installation when looking for templates
if [ -n "$MRI_STDDIR" ]; then
    stddir="$MRI_STDDIR"
else
    standard_spaces=(\
       /gpfs/group/mnh5174/default/lab_resources/standard \
       /opt/ni_tools/standard_templates \
       $HOME/standard \
     )

    stddir=
    for stddir in ${standard_spaces[@]}; do
       [ -d "$stddir" ] && break
    done

    if [ ! -d "$stddir" ]; then
	echo "cannot find standard space templates '$stddir'! looked in ${standard_spaces[@]}" >&2
	exit 1
    fi
fi

# source FSL if we have an FSLDIR but no FSLOUTPUTTYPE
# 20190509WF - running bats tests using mcflirt from within docker
#              might not have hit .profile to source FSLDIR
[ ! -z "$FSLOUTPUTTYPE" -a -n "${FSLDIR}" -a -d "${FSLDIR}" ] &&
   source ${FSLDIR}/etc/fslconf/fsl.sh || :

function archive_file() {
    fname="${1}"
    if [ -f "${fname}" ]; then
	#stat and date are not portable across Linux and BSD...
        [ $( uname ) = Darwin ] && mtime=$( stat -f "%Sm" -t "%Y%m%d_%H%M" "${fname}" ) || mtime=$( date -r "${fname}" +%Y%m%d_%H%M )
	mv "${fname}" "${fname}_${mtime}"
    fi
    return 0
}

#adapted from here: https://gist.github.com/aguy/2359833
function traperror () {
    local err=$1 # error status
    local line=$2 # LINENO
    local linecallfunc=$3
    local command="$4"
    local funcstack="$5"

    archive_file "${dotfile}_crash" #move any existing crash file out of the way
    echo "$(date) $(hostname) $0: ERROR '$command' failed at line $line - exited with status: $err" | tee -a "${dotfile}_crash"

    if [ "$funcstack" != "::" ]; then
	echo -n "$0: DEBUG Error in ${funcstack} " | tee -a "${dotfile}_crash"
	if [ "$linecallfunc" != "" ]; then
	    echo "called at line $linecallfunc" | tee -a "${dotfile}_crash"
	fi
    fi
    [ -n "$originalcwd" ] && echo -en "Initial working directory:\n  $originalcwd\n" | tee -a "${dotfile}_crash"
    echo -en "\nCurrent working directory:\n  $PWD\n" | tee -a "${dotfile}_crash"
    [ -n "$originalargs" ] && echo -en "\nArguments passed to script:\n  $originalargs\n\n" | tee -a "${dotfile}_crash"

    if [ -r "${logFile}" ]; then
	echo -en "\n\nLast 10 lines of log file:\n---------\n\n" | tee -a "${dotfile}_crash" #add two newlines
	tail -n 10 "${logFile}" | tee -a "${dotfile}_crash"
    fi

    if [ -r "preprocessFunctional_stderr" ]; then
	echo -en "\n\nLast 10 lines of preprocessFunctional_stderr:\n---------\n\n" | tee -a "${dotfile}_crash"
	tail -n 10 preprocessFunctional_stderr | tee -a "${dotfile}_crash"
    fi
}

#function for taking sequential processing pictures (used in FM unwarping for now)
# Whether to take sequential pictures of processing steps
[ -z "$pics" ] && pics=no #=yes, take

globalcount=0 #order of processing
function _picture {
    # only do this if we are told to
    [ "$pics" == "yes" ] || return 0

    # check we have a save directory
    [ -d $imgdir ] || mkdir $imgdir 

    globalcount=$((( $globalcount+ 1))) #let ..++ can return 0 and break things with set -e 
    name=$(basename $(basename $1 .gz) .nii)
    num=$(printf "%04d" $globalcount)
    imgname=$imgdir/${num}_$name.png
    slicer -u $1 -a $imgname
    convert -scale 200% -fill white -gravity southwest -annotate 0 "$num $name:  $2" $imgname $imgname
}

function dumpenv() {
    for i in _ {a..z} {A..Z}; do
	for var in `eval echo "\\${!$i@}"`; do
	    echo ${var}=${!var}
	done 
    done
}

#Handle gradient nonlinearity correction
function gradunwarp() {
    local im=$( remove_ext "$1" ) #image to be unwarped
    local gcoeffs="$2" #coefficient file
    
    if [ -z "$gcoeffs" ]; then
	#no gradient unwarping requested
	return 0
    fi
    
    #allow coeffs to be in scripts directory
    if [ ! -r "$gcoeffs" ]; then
	if [ ! -r "${scriptDir}/cfg_files/${gcoeffs}" ]; then
	    echo "Unable to locate -grad_unwarp file: $gcoeffs"
	    exit 1
	else
	    gcoeffs="${scriptDir}/cfg_files/${gcoeffs}"
	fi
    fi
    
    #check that command exists
    command -v gradient_unwarp.py >/dev/null 2>&1 || { echo "Cannot find gradient_unwarp.py. Aborting." >&2; exit 1; }

    #local is4d=$( fslval $im dim4 )
    rel "fslroi $im vol1 0 1" #gradient_unwarp.py only works on 3d images. pull first volume for this step

    #retain pre-gradient files
    rel "immv ${im} ${im}_pregdc"
    
    rel "gradient_unwarp.py \"vol1${ext}\" \"${im}_gdc_orig${ext}\" siemens -g \"$gcoeffs\" -n"
    rel "convertwarp --abs --ref=\"${im}_pregdc\" --warp1=fullWarp_abs --relout --out=${im}_gdc_warpfield" #--jacobian=gdc_jacobian
    #fslmaths gdc_jacobian -Tmean gdc_jacobian #omitting because jacobian is unused in the unwarping process    
    rel "applywarp --rel --interp=spline -i \"${im}_pregdc\" -r \"${im}_pregdc\" -w ${im}_gdc_warpfield -o \"${im}\""
    rel "imrm fullWarp_abs vol1"
}

# Function to fix negative range problems (negative values mess up bias field)
# This commonly happens for gradient unwarping, where the the value transformation outside the brain shifts some zeros into the negative range
function fix_negatives() {
    local im="$1"
    minval=$( fslstats ${im} -p 0 )
    maxval=$( fslstats ${im} -p 100 )
    if [ X`echo "if ( $minval < 0 ) { 1 }" | bc -l` = X1 ] ; then
	if [ X`echo "if ( $maxval > 0 ) { 1 }" | bc -l` = X1 ] ; then
	    # if there are just some negative values among the positive ones then reset zero to the min value
	    #rel "fslmaths ${im} -sub $minval ${im} -odt float"

	    #MNH 2017: The approach of setting the minimum to zero through addition leads to scenarios where we are adding hundreds of points to the image globally
	    #even if only a tiny fraction of voxels are rather negative. This causes problems downstream. Switch to a much simpler approach of zeroing anything that is negative.
	    #If there is important information in the negative values, this approach will be bad. But in examining gradient distortion outputs, this does not appear to be the case.
	    rel "fslmaths ${im} -thr 0 ${im} -odt float"
	else
	    # if all values are negative then make them positive, but retain any zeros as zeros
	    rel "fslmaths ${im} -bin -binv zeromask"
	    rel "fslmaths ${im} -sub $minval -mas zeromask ${im} -odt float"
	    rel "imrm zeromask"
	fi
    fi
}


# give absolute path from a potentionally relative path
# 20170426WF -- added for prepare_fieldmap
# path given doesn't have to exist, but the directory (dirname) does
abspath() { 
 [ -z "$1" ] && return 1
 dir=$(dirname "$1")
 [ ! -d "$dir" ] && warn "WARNING: $FUNCNAME: cannot find dir for '$1' (while in in '$(pwd)')" && echo "$1" && return 1
 echo "$(cd "$dir";pwd)/$(basename "$1")"
}

function deleteFile() {
    #echo "to del: $1"
    # no file, nothing to remove. skip
    [ ! -f "$1" ] && return 0

    # 20240324: add dryrun
    if [ -n "${DRYRUN:-}" ]; then
       echo "rm '$1' # not run"
       return 0
    fi

    rel "rm -f \"$1\""
}

#rel is shorthand for "run, echo, log"
function rel() {
    #function that runs, echos to terminal, and logs to file an arbitrary command
    local cmd="${1}"
    local comment=0
    local timeit=0
    local pipesave=""
    local cmdExit=0
    local qaout=0
    local rtime=""

    if [ -n "${2}" ]; then
	if [[ ${2} = c ]]; then
	    comment=1
	elif [[ ${2} = t ]]; then
	    timeit=1
	elif [[ ${2} = q ]]; then
	    qaout=1
	fi	    
    fi
    
    if [ ${qaout} -eq 1 ]; then
	echo -e "${cmd}" >> "${qa_imglog}"
    elif [ -n "${logFile}" ]; then
	pipesave="|tee -a '$logFile'"
	if [ $comment -eq 1 ]; then
	    cmd="## ${cmd}"
       else
          rtime=" # $(date +%Y%m%dT%H:%M)"
	fi
       echo -e "${cmd}${rtime}" >> "${logFile}"
    fi

    if [ $comment -eq 0 ]; then
	#echo command to screen verbatim
	echo ${cmd}

	#run command
	tic=$(date +%s)
	eval ${cmd}
	cmdExit=$?
	toc=$(date +%s)
    else
	#echo command to screen with dashes to offset text visually
	echo -e "----  ${cmd}"
    fi

    # how long did it take. write to file if we have a logfile
    [ $timeit -eq 1 ] && eval "echo -e \"#\ttook $((($toc - $tic ))) seconds\" $pipesave"
    
    return $cmdExit
}

function dimon {
    [ $# -ne 2 ] && echo "dimon function requires <dicom pattern> <output prefix>" && exit 1

    dpat="$1"
    outbase="$2"
    
    #backup ${outbase}.nii if it exists so that Dimon doesn't bomb out
    [ -f "${outbase}.nii" ] && mv "${outbase}.nii" "${outbase}_bak.nii"
    [ -f "${outbase}.nii.gz" ] && mv "${outbase}.nii.gz" "${outbase}_bak.nii.gz"

    rel "Dimon \
	    -infile_pattern \"${dpat}\" \
	    -GERT_Reco \
	    -quit \
	    -dicom_org \
	    -gert_write_as_nifti \
	    -gert_create_dataset \
	    -gert_to3d_prefix \"${outbase}\""

    #-sort_by_acq_time

    rm -f dimon.files*
    rm -f GERT_Reco_dicom*

    #if afnirc has compressor on, then above will already generate nii.gz
    if [[ -f "${outbase}.nii" && $FSLOUTPUTTYPE = NIFTI_GZ ]]; then
	rel "gzip -f \"${outbase}.nii\"" #use -f to force overwrite in case where functional.nii.gz exists, but we want to replace it.
    fi

}

function cleanup_preprocessMprage {
    rel "imrm ${T1}_fast_totbias ${T1}_s20 ${T1}_initmask_s20 ${T1}_hpf ${T1}_hpf2_brain ${T1}_hpf2_s20 \
	${T1}_hpf_brain ${T1}_hpf_brain_mask ${T1}_hpf_s20 \
	${T1}_initfast2_bias ${T1}_initfast2_brain_mask ${T1}_initfast2_brain_mask2 \
	${T1}_initfast2_restore ${T1}_initfast2_seg ${T1}_initfast_bias \
	${T1}_initfast_restore ${T1}_initfast_seg ${T1}_fast_bias_vol2 \
	${T1}_fast_bias_vol32 template_to_subject_warpcoef template_to_subject_warpcoef_gdistort ${T1}_fast_bias_idxmask \
	${T1}_fast_bias ${T1}_fast_bias_init ${T1}_fast_restore ${T1}_fast_seg \
	${T1}_bet_initbias ${T1}_skullstrip ${T1}_biascorr_brain_mask ${T1}_bet_fast_restore \
	${T1}_bet_fast_bias fullWarp_abs gdc_inv_warpfield gdc_warpfield \
	${T1}_initial_brain ${T1}_initial_brain_mask ${T1}_initial_brain_mask_dil1x \
	${T1}_skullstrip_postgdc ${outputFile}_twostepinterp ${T1}_biascorr_gdc_orig ${T1}_biascorr_mask"

    [ $( imtest mprage_warpcoef_withgdc ) -eq 1 ] && rel "imrm mprage_warpcoef"
    [ -d bright_skull ] && rm -rf bright_skull

    #explicit return code needed to avoid implicit status of prior command
    return 0
}


# remove flag files indicating a step was completed
# keeps .functional, .detect_tr, .preprocessfunctional_complete
# optionally keeps .motion_correction_complete (if KEEP_MOTION_FILES)
function rm_dotsteps {
    deleteFile ".median_intensity"
    deleteFile ".pct2"
    deleteFile ".csf_ts"
    deleteFile ".csf_ts_deriv"
    deleteFile ".wm_ts"
    deleteFile ".wm_ts_deriv"
    deleteFile ".gs_ts"
    deleteFile ".gs_ts_deriv"
    deleteFile ".motion_demean"
    deleteFile ".motion_deriv"
    deleteFile ".nuisance_regressors"
    deleteFile ".wm_ero2x${ext}"
    deleteFile ".csf_ero2x${ext}"
    deleteFile ".brainmask_ero2x_anat${ext}"
    deleteFile ".brainmask_ero2x${ext}"
    deleteFile ".template_csf_prob${ext}"
    deleteFile ".template_wm_prob${ext}"
    deleteFile ".fieldmap_magnitude"
    deleteFile ".fieldmap_phase"
    deleteFile ".reorient2std_complete"
    deleteFile ".t2star_coreg_complete"
    deleteFile ".epiref_bet_complete"
    deleteFile ".motion_censor_complete"
    deleteFile ".motion_plots_complete"
    deleteFile ".skull_strip_complete"
    deleteFile ".func2struct_complete"
    deleteFile ".topup_complete"
    deleteFile ".warp_complete"
    deleteFile ".compute_warp_complete"
    deleteFile ".smoothing_complete"
    deleteFile ".ica_aroma_complete"
    deleteFile ".temporal_filtering_complete"
    deleteFile ".rescaling_complete"
    deleteFile ".thresholding_complete"
    deleteFile ".despike_complete"
    deleteFile ".fmunwarp_complete"
    deleteFile ".prepare_fieldmap_complete"
    deleteFile ".nuisance_regression_complete"
    deleteFile ".nuisance_compute_complete"
    deleteFile ".bandpass_filter_complete"
    deleteFile ".mean_final_func_complete"

    # we want to keep motion bits around
    if [ -z "$KEEP_MOTION_FILES" ]; then
      deleteFile ".motion_correction_complete"
      deleteFile ".slice_timing_complete"
    fi
}
function rm_completefiles {
    rel "\nStarting over...\n\nRe-running all preprocessing steps\n" c
    deleteFile ".functional"
    deleteFile ".detect_tr"
    deleteFile ".detect_sliceorder"
    deleteFile ".detect_series"
    deleteFile ".detect_protocolname"
    deleteFile ".detect_epiref"
    rm_dotsteps
    deleteFile ".preprocessfunctional_complete"
}

function cleanup_preprocessFunctional {

    if [ ${despike} -eq 1 ]; then
	dspre="d"
    else	   
	dspre=""
    fi

    apre=""
    if [ ${ica_aroma} -eq 1 ]; then
	apre="a"
	rm -rf ica_aroma/melodic.ica #work folder from ICA decomposition
	deleteFile ica_aroma/denoised_func_data_nonaggr${ext}
    fi
    
    [ $no_warp -eq 0 ] && wpre="w" || wpre=""
    [ $use_fm -eq 1 ] && upre="u" || upre=""

    [ -z "$funcFile" ] && echo "ERROR: $FUNC_NAME does not have funcfile!" && exit 1
    #echo "func: $funcFile"
    #echo "dspre: $dspre"
    #echo "wpre: $wpre"
    #echo "upre: $upre"
    #echo "smoothing_suffix: $smoothing_suffix"
    #echo "ext: $ext"

    #interleaved stream
    deleteFile t_${funcFile}${ext}
    #deleteFile mt_${funcFile}${ext}
    #deleteFile ${upre}mt_${funcFile}${ext}
    #deleteFile ${upre}mt_${funcFile}_mean_reg${ext}
    deleteFile k${upre}mt_${funcFile}${ext}
    deleteFile k${upre}mt_tmean_mask${ext}
    deleteFile ${wpre}${dspre}k${upre}mt_${funcFile}${ext}
    deleteFile ${wpre}${dspre}k${upre}mt_${funcFile}_extents_mask${ext}
    deleteFile s${wpre}${dspre}k${upre}mt_${funcFile}${smoothing_suffix}${ext}
    deleteFile ${apre}s${wpre}${dspre}k${upre}mt_${funcFile}${smoothing_suffix}${ext}
    deleteFile f${apre}s${wpre}${dspre}k${upre}mt_${funcFile}${smoothing_suffix}${ext}

    deleteFile k${upre}mt_${funcFile}_Tmin${ext}
    deleteFile k${upre}mt_${funcFile}_Tmin_10pctThr${ext}
    #deleteFile ${upre}mt_tmean${ext}
    deleteFile ${dspre}k${upre}mt_tmean${ext}
    deleteFile ${wpre}${dspre}k${upre}mt_${funcFile}_tmean${ext}
    deleteFile f${apre}s${wpre}${dspre}kmt_mean_float${ext}
    deleteFile k${upre}mt_${funcFile}_98_2_mask${ext}
    deleteFile k${upre}mt_${funcFile}_98_2_mask_dil1x${ext}
    deleteFile k${upre}mt_${funcFile}_masked${ext}
    deleteFile s${wpre}${dspre}k${upre}mt_${funcFile}${smoothing_suffix}_usan_size${ext}

    #with one-step warp, often get files such as wuktmd where FM unwarping and MNI warp are adjacent
    #deleteFile mt_${funcFile}${ext}
    #deleteFile mt_${funcFile}_mean_reg${ext}
    deleteFile ${dspre}kmt_${funcFile}${ext}
    deleteFile ${dspre}kmt_tmean_mask${ext}
    deleteFile ${wpre}${upre}${dspre}kmt_${funcFile}${ext}
    deleteFile ${wpre}${upre}${dspre}kmt_${funcFile}_extents_mask${ext}
    deleteFile s${wpre}${upre}${dspre}kmt_${funcFile}${smoothing_suffix}${ext}
    deleteFile ${apre}s${wpre}${upre}${dspre}kmt_${funcFile}${smoothing_suffix}${ext}
    deleteFile f${apre}s${wpre}${upre}${dspre}kmt_${funcFile}${smoothing_suffix}${ext}

    deleteFile ${dspre}kmt_${funcFile}_Tmin${ext}
    deleteFile ${dspre}kmt_${funcFile}_Tmin_10pctThr${ext}
    #deleteFile mt_tmean${ext}
    deleteFile kmt_tmean${ext}
    deleteFile ${wpre}${upre}${dspre}kmt_${funcFile}_tmean${ext}
    deleteFile f${apre}s${wpre}${upre}${dspre}kmt_mean_float${ext}
    deleteFile kmt_${funcFile}_98_2_mask${ext}
    deleteFile kmt_${funcFile}_98_2_mask_dil1x${ext}
    deleteFile kmt_${funcFile}_masked${ext}
    deleteFile s${wpre}${upre}${dspre}kmt_${funcFile}${smoothing_suffix}_usan_size${ext}

    #sequential stream
    #deleteFile m_${funcFile}${ext}
    #deleteFile m_${funcFile}_mean_reg${ext}
    #deleteFile ${upre}m_${funcFile}${ext}
    #deleteFile t${upre}m_${funcFile}${ext}
    #deleteFile tm_${funcFile}_tmean${ext}
    deleteFile ${dspre}kt${upre}m_${funcFile}${ext}
    deleteFile ${dspre}kt${upre}m_tmean_mask${ext}
    deleteFile ${wpre}${dspre}kt${upre}m_${funcFile}${ext}
    deleteFile ${wpre}${dspre}kt${upre}m_${funcFile}_extents_mask${ext}
    deleteFile s${wpre}${dspre}kt${upre}m_${funcFile}${smoothing_suffix}${ext}
    deleteFile ${apre}s${wpre}${dspre}kt${upre}m_${funcFile}${smoothing_suffix}${ext}
    deleteFile f${apre}s${wpre}${dspre}kt${upre}m_${funcFile}${smoothing_suffix}${ext}

    deleteFile kt${upre}m${dspre}_${funcFile}_Tmin${ext}
    deleteFile kt${upre}m${dspre}_${funcFile}_Tmin_10pctThr${ext}
    deleteFile t${upre}m${dspre}_tmean${ext}
    deleteFile kt${upre}m${dspre}_tmean${ext}
    deleteFile ${wpre}kt${upre}m${dspre}_${funcFile}_tmean${ext}
    deleteFile f${apre}s${wpre}kt${upre}m${dspre}_mean_float${ext}
    deleteFile kt${upre}m${dspre}_${funcFile}_98_2_mask${ext}
    deleteFile kt${upre}m${dspre}_${funcFile}_98_2_mask_dil1x${ext}
    deleteFile kt${upre}m${dspre}_${funcFile}_mask${ext}
    deleteFile kt${upre}m${dspre}_${funcFile}_masked${ext}
    deleteFile s${wpre}kt${upre}m${dspre}_${funcFile}${smoothing_suffix}_usan_size${ext}

    #with one-step warp, often get files such as wuktmd where FM unwarping and MNI warp are adjacent
    deleteFile m_${funcFile}${ext}
    #deleteFile tm_${funcFile}${ext}
    deleteFile ktm_${funcFile}${ext}
    deleteFile ${dspre}ktm_${funcFile}${ext}
    deleteFile ktm_tmean_mask${ext}
    deleteFile ktm_${funcFile}_tmean_mask${ext}
    deleteFile ${wpre}${upre}${dspre}ktm_${funcFile}${ext}
    deleteFile ${wpre}${upre}${dspre}ktm_${funcFile}_extents_mask${ext}
    deleteFile s${wpre}${upre}${dspre}ktm_${funcFile}${smoothing_suffix}${ext}
    deleteFile ${apre}s${wpre}${upre}${dspre}ktm_${funcFile}${smoothing_suffix}${ext}
    deleteFile f${apre}s${wpre}${upre}${dspre}ktm_${funcFile}${smoothing_suffix}${ext}

    deleteFile ktm_${funcFile}_Tmin${ext}
    deleteFile ktm_${funcFile}_Tmin_10pctThr${ext}
    #deleteFile tm_tmean${ext}
    deleteFile ktm_${funcFile}_tmean${ext}
    deleteFile ${wpre}${upre}${dspre}ktm_${funcFile}_tmean${ext}
    deleteFile f${apre}s${wpre}${upre}${dspre}ktm_mean_float${ext}
    deleteFile s${wpre}${upre}${dspre}ktm_mean_float${ext}
    deleteFile ktm_${funcFile}_98_2_mask${ext}
    deleteFile ktm_${funcFile}_98_2_mask_dil1x${ext}
    deleteFile ktm_${funcFile}_mask${ext}
    deleteFile ktm_${funcFile}_masked${ext}
    deleteFile s${wpre}${upre}${dspre}ktm_${funcFile}${smoothing_suffix}_usan_size${ext}

    deleteFile ${preSmooth}_mask_allbrain${ext}
    deleteFile ${preSmooth}_mask_edgecorrection${ext}

    #general files
    #deleteFile mc_mean_vol_target${ext}
    #deleteFile premc_mean_vol${ext}

    deleteFile func_to_struct_init.mat #6 dof transform prior to BBR
    deleteFile fmap2epi_bbr.mat
    deleteFile struct_to_func.mat
    deleteFile func_to_struct${ext}
    deleteFile func_to_struct_allv${ext}
    deleteFile func_to_struct_nounwarp${ext}

    deleteFile mask_${funcFile}_Tmin_10pctThr${ext}

    deleteFile ${prefix}tmean${smoothing_suffix}${ext}

    #some more here...
    deleteFile "${threshMask}_2struct${ext}"
    deleteFile *98_2_mask_dil1x_outOfAnatBounds${ext}
    deleteFile templateMask${ext}

    [[ $constrainToTemplate = [Nn] ]] && deleteFile *98_2_mask_dil1x_templateTrim${ext}

    deleteFile func_to_standard_warp_allv${ext} #onestep_warp when warp is not volume-wise

    rm -rf mcOrig
    rm -rf unwarptemps #intermediate fieldmap files
    #[ -d mc_mats ] && rm -rf mc_mats #original motion transformation matrices

    deleteFile example_func${ext}
    deleteFile premc_stat_vol${ext}
    deleteFile premc_mean_vol${ext} # old name
    #deleteFile mc_initial${ext} #initial motion correction to mean functional
    #deleteFile mc_target_mask${ext} #brain mask for mc_target used for rmsdiff in motion_plots

    deleteFile "*${funcFile}*_rel_mean.rms" #shouldn't be necessary anymore since we compute rms ourselves
    deleteFile "*${funcFile}*_abs_mean.rms"
    deleteFile "_${funcNifti}" #initial reoriented file with just a prepended underscore

    #file containing individual volumes of 4d dataset after fslsplit (used for MC+unwarping)
    [ -d episplit ] && rm -rf episplit

    deleteFile epi_bet${ext}

    deleteFile mot_intens_mask${ext} #used by fsl_motion_outliers

    deleteFile epiref_to_struct_init${ext}
    deleteFile epiref_to_struct_init.mat
    deleteFile epiref_to_struct_nounwarp${ext}
    deleteFile epiref_brain_bias${ext}
    deleteFile epiref_brain_restore${ext}
    #deleteFile mc_target_brain_bias${ext}
    #deleteFile mc_target_brain_restore${ext}

    deleteFile dktm_${funcFile}_wavelet_noise.nii.gz
    deleteFile dkmt_${funcFile}_wavelet_noise.nii.gz

    if [[ "$nuisance_regression" -eq 1 || "$bandpass_filter" -eq 1 ]]; then
	deleteFile n${apre}s${wpre}${upre}${dspre}ktm_${funcFile}${smoothing_suffix}${ext}
	deleteFile nf${apre}s${wpre}${upre}${dspre}ktm_${funcFile}${smoothing_suffix}${ext}
    fi

    if [[ ( "$nuisance_regression" -eq 1 || "$nuisance_compute" -eq 1 ) && -f "$nuisance_file" ]]; then
	deleteFile "unfiltered_${nuisance_file}" #remove unfiltered nuisance regressors if filtered regressors exist
    fi

    ## Files left over from Finn's pipeline
    #wktm_rest_1_98_2_mask_dil1x.nii.gz
    #wktm_rest_1_98_2_mask_dil1x_templateTrim.nii.gz
    [[ -L subject_mask${ext} && $( readlink subject_mask${ext} ) != ${wpre}k${upre}tm_${funcFile}_98_2_mask_dil1x${ext} ]] && deleteFile ${wpre}k${upre}tm_${funcFile}_98_2_mask_dil1x${ext}
    [[ -L subject_mask${ext} && $( readlink subject_mask${ext} ) != ${wpre}k${upre}tm_${funcFile}_98_2_mask_dil1x_templateTrim${ext} ]] && deleteFile ${wpre}k${upre}tm_${funcFile}_98_2_mask_dil1x_templateTrim${ext}
    ###

    if [ -n "$upre" ]; then
       deleteFile ${upre}mt_${funcFile}${ext}
       deleteFile ${upre}mt_${funcFile}_mean_reg${ext}
       deleteFile ${upre}mt_tmean${ext}
       deleteFile ${upre}m_${funcFile}${ext}
       deleteFile t${upre}m_${funcFile}${ext}
    fi

    # remove motion files if we aren't told to keep them
    # this option implemented to keep time consuming 4d motion computation
    if [[ -z "$KEEP_MOTION_FILES" ]]; then

      deleteFile m_${funcFile}${ext}
      deleteFile m_${funcFile}_mean_reg${ext}

      deleteFile tm_tmean${ext}
      deleteFile tm_${funcFile}_tmean${ext}
      deleteFile tm_${funcFile}${ext}

      deleteFile mt_${funcFile}${ext}
      deleteFile mt_${funcFile}${ext}
      deleteFile mt_${funcFile}_mean_reg${ext}
      deleteFile mt_tmean${ext}

      [ -d mc_mats ] && rm -rf mc_mats #original motion transformation matrices

      deleteFile mc_initial${ext} #initial motion correction to mean functional
      deleteFile mc_target_mask${ext} #brain mask for mc_target used for rmsdiff in motion_plots
      

      deleteFile mc_target_brain_bias${ext}
      deleteFile mc_target_brain_restore${ext}

      deleteFile mc_mean_vol_target${ext}
      deleteFile premc_stat_vol${ext}
      deleteFile premc_mean_vol${ext} # old name

      # in case we missed the empty upre
      deleteFile ${upre}mt_${funcFile}${ext}
      deleteFile ${upre}mt_${funcFile}_mean_reg${ext}
      deleteFile ${upre}mt_tmean${ext}
      deleteFile ${upre}m_${funcFile}${ext}
      deleteFile t${upre}m_${funcFile}${ext}

    fi

    # keeps .functional, .detect_tr, .preprocessfunctional_complete
    # optionally keeps .motion_correction_complete (if KEEP_MOTION_FILES)
    rm_dotsteps
}

# read_preproc_cmd does not work!
# sets $@ for function instead of global
function read_preproc_cmd {
 if [ -f .preproc_cmd ]; then
   read cmd < .preproc_cmd
   # disable wildcard expansion so that -dicom patterns don't get expanded
   set -f 
   # change positional parameters to stored settings
   set -- $cmd
   # re-enable wildcard expansion as usual
   set +f 
 else
   echo "no .preproc_cmd files, cannot read!"
   exit 1
 fi
}
warn() { echo -e "$@" >&2; }


# given the NAME of an array that contains the names of other variables 
# (presumably global variable names used by a function)
# print the variable name and value
# e.g. GLOBALS=(template mask)
#      printvariablesin GLOBALS
# ouptut like:
#      template=mni
#      mask=subj_mask.nii.gz
# saved to file '.$globalsarrayname.cfg'
function print_vars_in {
   # scary bash indirect reference of array index
   # to build array globals from passed in variable name
   local globalarrayname=$1
   [ -z "$globalarrayname" ] && warn "$FUNC_NAME expects the name of a global array as only input" && return 1
   #savefile=.${globalarrayname,,}.cfg
   # above breaks on OSX, change use tr instead of ,, to lowercase  
   savefile=".$(echo ${globalarrayname}|tr A-Z a-z).cfg"

   local ref="$globalarrayname[@]"
   local globals=(${!ref})

   (
   echo "# $(date +%F/%H:%M)"
   for var in ${globals[@]};do
      echo "$var='${!var}'"
   done
   echo
   ) >> $savefile
}

# vim: set tabstop=7:

#small function to check coregistration of two images
function qa_image {
    underlay="${1}"
    overlay="${2}"
    fname="${3}"
    title="${4}"

    xsize=$( fslval $underlay dim1 )
    if [ $xsize -gt 100 ]; then #set scale of slicer depending on size of images (since pngs from larger 3d images are larger in pixel size)
	scale=2
	fsize=36
    else
	scale=3
	fsize=26
    fi
    [ -z "$qa_imgdir" ] && local qa_imgdir=. #default to current directory if not specified
    rel "slicer \"$underlay\" \"$overlay\" -s $scale -x 0.35 sla.png -x 0.45 slb.png -x 0.55 slc.png -x 0.65 sld.png \
	   -y 0.35 sle.png -y 0.45 slf.png -y 0.55 slg.png -y 0.65 slh.png \
	   -z 0.35 sli.png -z 0.45 slj.png -z 0.55 slk.png -z 0.65 sll.png" q

    rel "pngappend sla.png + slb.png + slc.png + sld.png - sle.png + slf.png + slg.png + slh.png - sli.png + slj.png + slk.png + sll.png \"${qa_imgdir}/$fname\"" q

    [ -n "$title" ] && rel "montage -label \"${title}\nunderlay:$( basename $underlay )\noverlay:$( basename $overlay )\" \"${qa_imgdir}/$fname\" -pointsize $fsize -geometry +0+0 \"${qa_imgdir}/$fname\"" q

    rm -f sl?.png #cleanup
}

function process_func_refimg() {
    
    if [ -n "$funcRefimg" ]; then
	if [[ -d "$funcRefimg" && ! -r .epiref_bet_complete ]]; then
	    #if -funcRefImg is a directory, assume that this is the raw directory for the subject and we should detect the reference	    
	    #look for dicom in previous and following series
	    if [ -z "$series" ]; then
		echo "series variable not set, but -func_refimg detect specified. Cannot determine how to search for SBref"
		exit 1
	    fi

	    if [ -z "$protocolname" ]; then
		echo "protocolname variable not set, but -func_refimg detect specified. Cannot determine how to search for SBref"
		exit 1
	    fi
	    
	    #find first file matching the dicom pattern in subfolders of the directory
	    local rawdir=$funcRefimg
	    local sbrefFound=0
	    while IFS= read -r -d '' dir; do
		#echo "find '$dir' -iname '$dicomPattern' -type f -print -quit"
		firstDicom=$( find "$dir" -iname "$dicomPattern" -type f -print -quit )
		#echo "dcm: $firstDicom"
		
		if [ -n "${firstDicom}" ]; then #check the number of characters in the string
		    local cDicom=$( dicom_hdr -sexinfo "${firstDicom}" )
		    local cProtocol=$( echo "${cDicom}" | grep -i "ACQ Protocol Name" | perl -pe "s:.*ACQ Protocol Name//(\w+).*$:\1:" )
		    local cSeries=$( echo "${cDicom}" | grep "REL Series Number//" | perl -pe 's|^.*REL Series Number//(\d+).*$|\1|' ) #series number

		    echo "${cDicom}" | grep -q "REL Image Comments//Single-band reference" && local cSbref=1 || local cSbref=0
		    
		    #echo "cprotocol: $cProtocol, cSeries: $cSeries, issbref: $cSbref, series to match: $series, proto to match: $protocolname"
		    if [[ "$cProtocol" == "$protocolname" && ( $cSeries == $(( series - 1)) || $cSeries == $(( series + 1)) ) && $cSbref == 1 ]]; then
			sbrefFound=1
			funcRefimg="${firstDicom}"
			echo "${firstDicom}" > .detect_epiref
			rel "  Detected SBref image -func_refimg: ${funcRefimg}" c
			break
		    fi
		fi
	    done < <(find $rawdir -mindepth 1 -maxdepth 1 -type d -print0)

	    if [ $sbrefFound -eq 0 ]; then
		#rel "Unable to detect -func_refimg in $rawdir. Cannot continue." c
		rel "Unable to detect -func_refimg in $rawdir. Proceeding without func -> epiref -> structural intermediate coregistration." c
		funcRefimg=
		return 0
	    fi
	fi
	
	if [[ ! -f "$funcRefimg" ]] && [[ ! -h "${funcRefimg}" ]]; then
	    echo -e "Functional reference scan (-func_refimg) specified but not found: ${funcRefimg}.\nExiting.\n"
	    exit 1
	fi

	if [ -n "$ref_vol" ]; then
	    echo "-ref_vol and -func_refimg specified. Ignoring -ref_vol and using -func_refimg $funcRefimg."
	    ref_vol=
	fi

	if [ ! -r .epiref_bet_complete ]; then
    	    #copy reference image to local directory to make directory more portable
	    #if funcRefimg is a single DICOM file, change to NIfTI
	    dicom_hdr "$funcRefimg" 2>&1 | grep -q "ERROR: can't open.*as a DICOM file" && isdicom=0 || isdicom=1 # 0 exit status from grep indicates a match
	    
	    if [ $isdicom -eq 1 ]; then
		rel "Converting -func_refimg to NIfTI" c
		if [ $have_dcm2niix -eq 1 ]; then
		    [ -r epiref.nii.gz ] && rm -f epiref.nii.gz
		    dcm2niix -z y -f epiref -o ./ $( dirname "${funcRefimg}" )
		else
		    rel "Using to3d to convert epiref to NIfTI. Warning: this will occasionally result in inconsistent unwarping behavior due to bad image headers. Prefer dcm2niix!" c
		    rel "to3d -overwrite -prefix epiref.nii.gz -ushort2float \"$funcRefimg\""
		fi
	    else
		#copy reference image to local directory to make directory more portable
		rel "fslmaths \"$funcRefimg\" epiref"
	    fi


	    rel "fslreorient2std epiref epiref" #reorient epiref to LPI/RPI. Crucial to getting fieldmap orientation and behavior consistent
	    
	    # 20210513WF - sarap oddball resting state refs are difficult. unifizing helps
	    [ $unifize_funcref -eq 1 ] && rel "3dUnifize -prefix epiref${ext} -input epiref${ext} -overwrite"
	    #skull strip reference image to improve coregistration
	    #rel "bet epiref epiref_brain -f 0.3 -n -R" #include bias field correction given heavy bias for 32-channel data
	    rel "3dSkullStrip -overwrite -input epiref${ext} -prefix epiref_brain${ext} -orig_vol"
	    rel "fast -o epiref_brain -l 20 -b -B -t 2 --iter=12 --nopve --fixed=0 epiref_brain"
	    rel "imrm epiref_brain_seg" #not needed for anything
	    #use epiref_brain_restore for coregistration
	    qa_image epiref_brain epiref "epiref_skullstrip.png" "Skull-stripped epiref overlaid with original epiref"
	    
	    rel "date > .epiref_bet_complete"
	fi
    fi
    return 0 #explicit return status to avoid returning result of last command
}

#randomly sleep 0-2 seconds to avoid lock file collisision
#Apr2014: I'm not really sure if this is necessary... problems may have emerged from running fslreorient2std simultaneously on originals...
#Still, for 2 seconds, I'll keep it.
randomsleep(){ sleep $(echo "scale=9; $RANDOM/32767*2"|bc)s; }

# imtest but return w/exit status and can handle relative symlnks
# if basename is not a file, readlink wont find it and will return "", abspath of "" is "". imtest "" fails
# TODO: need imglob -extension ?
# linux gets a real readlink that is recursive. OSX/BSD only gets one pass
[[ $(uname) =~ Linux ]] && 
   imtestln() { [ -n "$1" ] && [ $( imtest $1 ) -eq 1 -o $(imtest $(readlink -f "$1")) -eq 1 ]; } ||
   imtestln() { [ -n "$1" ] && [ $( imtest $1 ) -eq 1 -o $(cd $(dirname $1); imtest $(abspath $(readlink $(basename $1)))) -eq 1 ]; }
# is file one really file 2, returns 0 (true) if same
a_is_b() { diff -q $1 $2; }
# is the input a glob (e.g "MR*", "path/to/*dcm")
isglob() { [[ "$1" =~ .*\*.* ]]; }
# how many file in/match the first arg provided
cnt() { ls $1 | wc -l; }

# given a full file or partial name of a fieldmap config file
# find the full path
# echo lots of warnigns along the way
find_fmconfig(){
    local fm_cfg="$1"
    [ -z "$fm_cfg" ] && echo "Want to correct with fieldmaps but dont have a config file!" >&2 && return 1

    # if is a file, use that
    if [ -r $fm_cfg ]; then
	readlink -f $fm_cfg
	return 0
    fi

    ## need to find fmcfgdir
    # expect it to be in the fmcfg directory alongside our script ($0)
    local fmcfgdir=""
    for preprocScript in $0 $(dirname ${BASH_SOURCE[0]}){,/..}/preprocessFunctional; do
       [ ! -r "$preprocScript" ] && continue
       pdir=$(cd $(dirname $preprocScript); pwd)
       _fmcfgdir=$pdir/fmcfg
       [ -d $_fmcfgdir ] && fmcfgdir=$_fmcfgdir &&  break
    done

    [ -z "$fmcfgdir" -a ! -r "$fm_cfg" ] && echo "Cannot find script directory root to find config file for '$fm_cfg'!" >&2 && return 1

    # Allow --config to be a shorthand lookup, defined here, rather than a config file
    local fm_cfg_file=$fmcfgdir/$fm_cfg.fmcfg
    if [ -r $fm_cfg_file ]; then
      fm_cfg=$fm_cfg_file
    else
      case $fm_cfg in
         cogemo|multimodal|wpc5640 ) fm_cfg=$fmcfgdir/cogemo.fmcfg;;
         clock|specc|wpc6290|p5 )    fm_cfg=$fmcfgdir/MB5_TR1.0_TE30_60slc.fmcfg;;
         # dead code -- 20170224
         trust )                     fm_cfg=$fmcfgdir/trust.fmcfg;;
         bandit )                    fm_cfg=$fmcfgdir/bandit.fmcfg;;
         pet    )                    fm_cfg=$fmcfgdir/pet.fmcfg;;
      esac
    fi
    
    # source config file or warn
    if [ -n "$fm_cfg" -a -r "$fm_cfg" ]; then
      echo "$fm_cfg" # print out config file too
      return 0
    else
      echo "ERROR: readable config file not provided or understood ($fm_cfg)" >&2
      return 1
    fi
}
find_and_source_fmconfig() {
   fm_cfg=$(find_fmconfig $@)
   if [ ! -z "$fm_cfg" ]; then
      rel "using '$fm_cfg' for fieldmap config" c
      source $fm_cfg 
   else
      rel "could not find fm_cfg for '$@'; probably cannot continue" c
      return 1
   fi
}

exiterr(){ warn $@; exit 1; }

failunless(){ ! which $1 2>&1 >/dev/null ; }
checkdepends() {
   ret=0
   failunless imtest        && warn "You do not have FSL installed! This is required!" && let ++ret
   failunless 3dinfo        && warn "You do not have AFNI installed! This is required!" && let ++ret

   failunless perl          && warn "Your system does not have perl! This is required!" && let ++ret
   failunless python3        && warn "Your system does not have python3! This is required!" && let ++ret

   ! python3 -c "import nipy" && warn "You do not have nipy for python3! This is required for 4d_slice_motion"
   ! which ffmpeg            && warn "You do not have ffmpeg installed! This is required for mcmove!" 

   failunless ANTS              && warn    "You do not have ANTS installed! This is not required, but will improve preprocessing" 
   failunless runROBEX.sh       && warn    "You do not have ROBEX installed! This is not required, but will improve preprocessing" 
   failunless c3d_affine_tool   && warn    "You do not have c3d installed! This is not required, but will improve preprocessing: http://git.code.sf.net/p/c3d/git"

   failunless bats          && warn    "You do not have bats installed! This is only useful for testing the software" 

   return $ret
}

# dummy function so we know if this file has been sourced
helper_functions() { echo ${BASH_SOURCE[0]}; }

check_partialproc() {
   local current_proc="$1"; shift
   local partial_proc="$1"
   [ "$current_proc" != "$partial_proc" ] && return 0
   rel "partial_proc stopping @ $partial_proc $(date +%F)" c 
   exit 1 
}

# quick file checks
must_exist(){
    [ $# -eq 0 ] && exiterr "must_exist given no file to test!"
    local f="$1"; shift
    [ -r "$f" ] && return 0
    [ $# -gt 0 ] && msg="$@" || msg=""
    exiterr "$msg (DNE: $f)"
}
all_must_exist(){
    # give a list of files and a message to echo if any don't exist
    [ $# -le 1 ] && exiterr "too few arguments given to $FUNCNAME. Need at least 1 file and a msg" 
    msg="${!#}"
    while [ $# -gt 1 ]; do
	must_exist "$1" "$msg"
	shift
    done
}

grid_matches(){
  # NB. includes  -same_obl which is probably useful
  [ "$(AFNI_NO_OBLIQUE_WARNING=YES 3dinfo -same_grid "$@" | sort -u)" == "1" ]
}
resample_or_keep() {
   # if first matches second return name of second
   # otherwise resample second as ${second}_resampled.nii.gz and return it
   [ $# -ne 2 ] && echo "# $FUNCNAME ERROR: want 'ref' 'inset', got $# inputs instead" && return 1
   local ref="$1"; shift
   local inset="$1"; shift
   [ ! -r "$ref" ] && echo "# $FUNCNAME ERROR: cannot read ref '$ref' from $(pwd)!" && return 1
   [ ! -r "$inset" ] && echo "# $FUNCNAME ERROR: cannot read inset '$inset' from $(pwd)!" && return 1
   if ! grid_matches $ref $inset; then
      local new="$(basename "$inset"|sed 's/.nii\(.gz\)\?$//')_resampled.nii.gz"
      echo "WARNING: grid mismatch: ref '$ref' != inset '$inset'" >&2
      AFNI_NO_OBLIQUE_WARNING=YES 3dresample -rmode NN -master "$ref" -inset "$inset" -overwrite -prefix $new >&2
      inset="$new"
   fi
   ! grid_matches "$ref" "$inset" && echo "# $FUNCNAME ERROR! '$inset' != '$ref'. probably b/c oblique. see 3dinfo -same_obl $ref $new" && return 1
   echo $inset
}

preproc_git_ver(){
   test -d $(dirname $0) && cd $_
   rev=$(git rev-parse --short HEAD 2>/dev/null || echo -n '')
   [ -z "$rev" ] && echo "no_vcs_info" && return
   echo "$rev $(git diff --quiet && echo 'clean' || echo 'dirty')"
}

# returns true of all same grid (no 0s)
all_same_grid(){
   3dinfo -same_all_grid "$@" |grep -qv 0
}

# vim: set tabstop=7:
