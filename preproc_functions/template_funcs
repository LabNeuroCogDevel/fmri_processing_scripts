#!/bin/bash

OLD_TEMPLATE_CHECK_GOLBALS=(stddir reference USE_OLD_TEMPLATE mprage_bet)

find_mprage_warp(){
   # search for a file within the directory that has mprageBet
   # USAGE: find_mprage_warp $mprageBet [$search_file]
   # search_file defaults to mprage_nonlinear_warp_MNI*.nii.gz
   # used by warp_template_check with search_file=template_brain.nii*
   # returns file path or "" if not found
   local mprageBet="$1"; shift
   if [ -z "$mprageBet" ] || ! imtestln "$mprageBet" ; then
      echo ""
      # TODO: failure?
      # return 1?
   fi
   local mprage_prefix="$(basename $mprageBet bet.nii.gz)"
   [ $# -eq 0 ] &&
      search="${mprage_prefix}nonlinear_warp_MNI*.nii.gz" ||
      search="$1"

   # try both at the toplevel and in the actual file location
   find \
      "$(dirname "$mprageBet")" "$(dirname $(readlink -f "$mprageBet"))" \
      -name "$search"| sed 1q
}
# reference is in mprage preproess, templateBrain is in functional
#  need to change stddir for either (e.g. icaaroma in preprocessFunctional)
#  only need to change templateBrain in for functional
old_template_check(){
   [ -z "$reference$templateBrain" ] && rel "NO REFERENCE?! in \$reference or \$templateBrain" c && exit 1
   #rel "REF:$reference$templateBrain" c
   [[ ! "$reference$templateBrain" =~ mni|MNI ]] && return 0

   local mni3mm=$stddir/mni_icbm152_nlin_asym_09c/mni_icbm152_t1_tal_nlin_asym_09c_3mm.nii
   local Lext=$(3dinfo -Lextent $mni3mm)
   if [[  ! $Lext =~ ^96.0 && -z "$USE_OLD_TEMPLATE" ]]; then
      echo "You are using a bad MNI template! left extent of 3mm template should be 96.0 not $Lext" >&2
      echo "add -use_old_mni to continue" >&2
      exit 1
   fi

   ## if we have mprage_bet -- we have a chance to see what we should be using
   #  do a lot of work to check warp dim to sext if we can find linear warp from mprage_bet

   #rel "MPRAGE: $mprageBet" c
   if [ -n "$mprageBet" ] && imtestln "$mprageBet" ; then
      local warp=$(find_mprage_warp "$mprageBet")
      local sext=114
      if [ -n "$warp" -a -r "$warp" ]; then
         dim=$(3dinfo -adi $warp)
         sext=$(3dinfo -sextent $warp) 
      else
         rel "WARNING: cannot find $warppat, cannot test if old or new template is being used" c
      fi

      rel "MPRAGE: dim '$dim'mm sext '$sext'vx for warp '$warp'" c
      local want=114
      case $dim in
         2.0*) want=114;;
         *) echo "old_template_check undefined 'want' dim for '$dim' mm res; no valid check";
            # want shouldn't match if we are using old template and we dont have a dim
            [ -z "$USE_OLD_TEMPLATE" ] &&  want=$sext || want=0;;
      esac

      if [[ ! $sext =~ ^$want && -z "$USE_OLD_TEMPLATE" ]]; then
         echo "ERROR: need -use_old_mni: sext of $warp ($sext !~ ^$want) suggests old template!"
         exit 1
      elif [[ $sext =~ ^$want && -n "$USE_OLD_TEMPLATE" ]]; then
         echo "ERROR: trying -use_old_mni but sext of $warp ($sext =~ ^$want) suggests new template!"
         exit 1

      fi
   fi

   if [ -n "$USE_OLD_TEMPLATE" ]; then
      if  [ -n "$templateBrain" ]; then
         templateBrain=${stddir}_old/$(echo "$templateBrain" | sed "s:^$stddir::")
         ! imtestln "$templateBrain" && echo "cannot find old std template brain $templateBrain" && exit 1
      fi
      stddir=${stddir}_old
      [ ! -d "$stddir" ] && echo "cannot find old std template dir $stddir" && exit 1
      rel "USING OLD TEMPLATES @ $stddir | $templateBrain" c
   fi

   return 0
}

# make .18_09c.nii.gz from input file
# optionally, if given second argument "mask", will use NN interp instead of sinc
fixto1809c() { 
  [ $# -lt 1 ] && echo "usage: $FUNCNAME to_correct.nii.gz [-mask] [-mkbad] [-out newfile.nii.gz]" && return 1

  local reffolder="/opt/ni_tools/standard/mni_icbm152_nlin_asym_09c"
  local newname="18_09c"
  local mask=""
  local output="";

  local input=$1; shift
  while [ $# -ne 0 ]; do
     case $1 in
        -?mask) mask=1; shift;;
        -out) shift; output=$1; shift;;
        -mkbad) 
           reffolder="/opt/ni_tools/standard_old/mni_icbm152_nlin_asym_09c"
           newname="bad_09c"
           shift;;
         *) echo "unkown argument $1! no args for help"; return 1;;
    esac
  done

  [ $# -eq 2 ] && [ "$2" != "ismask" ] && echo "only valid second argument is 'ismask', you gave $2" && return 1

  # output name cannot be changed, requires input be .nii.gz
  [ -z "$output" ] && output="${input/.nii.gz/.$newname.nii.gz}"
  #output="$(dirname $input)/$(basename "$input" .nii.gz).18_09c.nii.gz"

  # checks
  [ -z "$input" -o ! -r "$input" ] && echo "$FUNCNAME needs nifti to warp. given '$@'" >&2 && return 1
  ! 3dinfo -space $input | grep -iq mni && echo "$input is not in mni space!" >&2 && return 1

  dim=$(3dinfo -adj $input|sed 's/0\+$//;s/\.$//')
  [ $dim != "1" ] && dim=_${dim}mm

  local ref=$reffolder/mni_icbm152_t1_tal_nlin_asym_09c${dim}.nii 
  # /opt/ni_tools/standard/09cFix/gen_mats.bash
  local mat=/opt/ni_tools/standard_old/09cFix/2mm_luna_to_fixed.mat 
  # file is identity:
  # 1  0  0  0  
  # 0  1  0  0  
  # 0  0  1  0  
  # 0  0  0  1  

  [ ! -r $ref -o ! -r $mat ] && echo "$FUNCNAME cannot find ref or mat ($ref $mat)" >&2 && return 1
  [ -z "$REDOWARP" -a -r "$output" ] && echo "have $output" >&2 && return 0
  echo "createing $output ($dim)"
  cmd="applyxfm4D '$input'  $ref '$output'  $mat -singlematrix" # default to sinc
  [ -n "$mask" ] && cmd="flirt -ref '$ref' -in '$input' -applyxfm -init '$mat' -out '$output' -interp nearestneighbour"
  if command -v rel >/dev/null; then
     rel "$cmd # $(pwd)" c
  else
     echo "$cmd # $(pwd)"
  fi
  eval "$cmd" && 3dNotes -h "[$FUNCNAME] $cmd" "$output"
}

# 20210426 - functional shouldn't need to specify but we do so check instead of select
warp_template_check() {
   # 20210520 - okay if templates are exactly the same! can go 2mm to 3mm
   #            TODO check preprocessMprage.log for (-r|-template_brain)
   #global $mprageBet $templateBrain $reference
   [ -v no_warp ] && [ $no_warp -eq 1 ] && echo "# no template check" && return
   local func_template="$templateBrain"
   [ ! -r $func_template ] && func_template=$func_template.nii
   [ ! -r $func_template ] && func_template=$func_template.gz
   [ ! -r $func_template ] && echo "ERROR: $templateBrain (.nii and .nii.gz '$func_template') DNE!" && return 1
   local template=$(find_mprage_warp "$mprageBet" "template_brain.nii*")
   # cannot do anything if it doesn't ready exist
   [ -z "$template" -o ! -r "$template" ] && 
      echo "# WARNING: cannot find 'tempalte_brain.nii*' within dir of mprage '$mprageBet'" && return

   # diff exist status is true when there is no difference
   # ! diff -q <(echo a) <(echo b) && echo diff # 'diff'
   if ! diff -q "$func_template" "$template" ; then
      rel "# WARNING: '$templateBrain' ('$reference', '$func_template') does not match template '$template' of bet '$mprageBet'. This is res is different. not okay if one is MNI and the other FSL" c
      return 0
   else
      rel "# template check success: '$templateBrain' (ref: '$reference') matches template '$template' (paired with bet '$mprageBet')" c
   fi

   return 0 
}

# vim: set tabstop=7:
